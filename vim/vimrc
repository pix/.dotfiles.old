" Add bundles to the path
"
call pathogen#runtime_append_all_bundles()

" File-type highlighting and configuration.
" Run :filetype (without args) to see what you may have
" to turn on yourself, or just set them all to be sure.
au BufRead,BufNewFile *.tex setf tex
syntax on
filetype off
filetype on
filetype plugin on
filetype indent on

set nocompatible
set nofoldenable 

" The current buffer can be put to the background without writing to disk;
" When a background buffer becomes current again, marks and undo-history are
" remembered.
set hidden

" By default, Vim only remembers the last 20 commands and search patterns
" entered. It‚Äôs nice to boost this up: 
set history=1000

" By default, pressing <TAB> in command mode will choose the first possible
" completion with no indication of how many others there might be. The
" following configuration lets you see what your other options are: 
set wildmenu

" To have the completion behave similarly to a shell, i.e. complete only up to
" the point of ambiguity (while still showing you what your options are), also
" add the following:
set wildmode=list:longest

" These two options, when set together, will make /-style searches
" case-sensitive only if there is a capital letter in the search expression.
" *-style searches continue to be consistently case-sensitive. 
set ignorecase 
set smartcase

" A running gvim will always have a window title, but when vim is run within
" an xterm, by default it inherits the terminal‚Äôs current title. 
set title

" When the cursor is moved outside the viewport of the current window, the
" buffer is scrolled by a single line. Setting the option below will start the
" scrolling three lines before the border, keeping more context around where
" you‚Äôre working. 
set scrolloff=3

" Swap files and backups are annoying but can save you a lot of trouble.
" Rather than spreading them all around your filesystem, isolate them to a
" single directory: 
set backupdir=~/.vim/tmp,~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim/tmp,~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set undodir=~/.vim/tmp/undo,~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backup undofile

" Intuitive backspacing in insert mode
set backspace=indent,eol,start
 

" Highlight search terms...
set hlsearch
set incsearch " ...dynamically as they are typed.

" The ‚ÄúPress ENTER or type command to continue‚Äù prompt is jarring and usually
" unnecessary. You can shorten command-line text and other info tokens with,
set shortmess=atI

" I Never, ever used background=light
set background=dark

" Automatically read a file again if it has been modified outside vim
" and not in the current session
set autoread

" Formatting, TextMate-style
nnoremap Q gqip

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" php
let php_htmlInStrings = 1 " use html syntax in strings
"" shell scripting
let highlight_function_name = 1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Clickodrome binds
map  <C-s> :w!<CR>
imap <C-s> <Esc>:w!<CR>a

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Clear current search highlight
nnoremap <esc> :noh<return><esc>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Write file with sudo // Life saver !
function! Sudowq()
	exe "w !sudo tee % > /dev/null"
	exe "e!"
endfunction
nmap <F2> :call Sudowq()<CR><Enter>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" In zsh: bindkey "^F" edit-command-line, just colorize the tmp file
autocmd BufReadPost /tmp/zshecl* set filetype=zsh

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ctags functions
let Tlist_Shutup = 1
let Tlist_WinWidth = 50
map <F3> :TlistToggle<cr>
map <esc><F3> :!/usr/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
" custom tags repository
set tags+=~/.vim/tags/**

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" bufferlist plugin
map <silent> <C-v>v :call BufferList()<CR>
map <silent> <C-v><C-v> :call BufferList()<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use DetectIndent plugin if available

set tabstop=4
set shiftwidth=4
set autoindent smartindent
set expandtab

autocmd FileType make     set noexpandtab
autocmd FileType python   set noexpandtab
autocmd BufReadPost * 
            \ if exists(":DetectIndent") |
            \   execute ":DetectIndent" |
            \ endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Make some plugins stfu
if !executable('git') || !executable('curl')
	let g:loaded_gist_vim = 1
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" I HATE HATE HATE Mouse emulation
set mouse-=a

if has("gui_running")
  colorscheme ir_black
else
  colorscheme desert
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Used for C and Hint man plugin
autocmd FileType c,cpp set ch=2
if &bg == "dark"
    hi HintHL cterm=bold ctermfg=white ctermbg=black guifg=blue3 guibg=white
else
    hi HintHL cterm=bold ctermfg=black ctermbg=white guifg=white guibg=blue3
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic
let g:syntastic_enable_signs=1
let g:syntastic_disabled_filetypes = ['c', 'cpp']

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" A.vim
let g:alternateNoDefaultAlternate = 1 " Do not alternate if not found

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" YankRing
let g:yankring_history_file = '.history/yankring'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Map C-Down and C-Up to move lines up/down
map [A <C-Up>
map [B <C-Down>
map Oa <C-Up>
map Ob <C-Down>
map! [A <C-Up>
map! [B <C-Down>
map! Oa <C-Up>
map! Ob <C-Down>
nmap <C-Down> :m+<CR>==
nmap <C-Up> :m-2<CR>==
imap <C-Down> <Esc>:m+<CR>==gi
imap <C-Up> <Esc>:m-2<CR>==gi
vmap <C-Down> :m'>+<CR>gv=gv
vmap <C-Up> :m-2<CR>gv=gv

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Source a local configuration file if available.
nmap Od <C-Left>
nmap Oc <C-Right>
nmap [D <C-Left>
nmap [C <C-Right>

imap Od <C-Left>
imap Oc <C-Right>
imap [D <C-Left>
imap [C <C-Right>

vmap Od <C-Left>
vmap Oc <C-Right>
vmap [D <C-Left>
vmap [C <C-Right>

map <C-Left> <C-T>
map <C-Right> <C-]>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Reselect visual block after indent/outdent
" http://vimbits.com/bits/20
vnoremap < <gv
vnoremap > >gv

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Get rid of this stupid default pink background 
highlight Pmenu ctermbg=0 ctermfg=5 
highlight PmenuSel cterm=bold ctermbg=5 ctermfg=0 
highlight PmenuSbar ctermbg=5 ctermfg=0 

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OmniCppComplete
autocmd CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview
let OmniCpp_DefaultNamespaces   = ["std", "_GLIBCXX_STD"]
let OmniCpp_GlobalScopeSearch   = 1
let OmniCpp_MayCompleteArrow    = 1 " autocomplete after ->
let OmniCpp_MayCompleteDot      = 1 " autocomplete after .
let OmniCpp_MayCompleteScope    = 1 " autocomplete after ::
let OmniCpp_NamespaceSearch     = 1
let OmniCpp_SelectFirstItem     = 2 " select first item (but don't insert)
let OmniCpp_ShowAccess          = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype (i.e. parameters) in popup window

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Alternate ( A.vim )
let g:alternateNoDefaultAlternate = 1
let g:alternateRelativeFiles = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Openssl
let g:openssl_backup = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keep search matches in the middle of the window and pulse the line when
" moving to them.
nnoremap n nzzzv
nnoremap N Nzzzv

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status line ------------------------------------------------------------- {{{
set laststatus=2
augroup ft_statuslinecolor
    au!

    au InsertEnter * hi StatusLine ctermfg=196 guifg=#FF3145
    au InsertLeave * hi StatusLine ctermfg=130 guifg=#CD5907
augroup END

set statusline=%f    " Path.
set statusline+=%m   " Modified flag.
set statusline+=%r   " Readonly flag.
set statusline+=%w   " Preview window flag.

set statusline+=\    " Space.

set statusline+=%#redbar#                " Highlight the following as a warning.
set statusline+=%{SyntasticStatuslineFlag()} " Syntastic errors.
set statusline+=%*                           " Reset highlighting.

set statusline+=%=   " Right align.

" File format, encoding and type.  Ex: "(unix/utf-8/python)"
set statusline+=(
set statusline+=%{&ff}                        " Format (unix/DOS).
set statusline+=/
set statusline+=%{strlen(&fenc)?&fenc:&enc}   " Encoding (utf-8).
set statusline+=/
set statusline+=%{&ft}                        " Type (python).
set statusline+=)

" Line and column position and counts.
set statusline+=\ (line\ %l\/%L,\ col\ %03c)

" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Source a local configuration file if available.
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
