" Add bundles to the path
call pathogen#runtime_append_all_bundles()

if has("gui_running")
  colorscheme ir_black
else
  colorscheme desert
endif

if $COLORTERM == 'gnome-terminal'
  set t_Co=256
endif

if &t_Co == 256
  colorscheme zenburn
endif

" File-type highlighting and configuration.
" Run :filetype (without args) to see what you may have
" to turn on yourself, or just set them all to be sure.
au BufRead,BufNewFile *.tex setf tex
syntax on
filetype off
filetype on
filetype plugin on
filetype indent on

set nocompatible
set nofoldenable 

" The current buffer can be put to the background without writing to disk;
" When a background buffer becomes current again, marks and undo-history are
" remembered.
set hidden

" By default, Vim only remembers the last 20 commands and search patterns
" entered. It‚Äôs nice to boost this up: 
set history=1000

" By default, pressing <TAB> in command mode will choose the first possible
" completion with no indication of how many others there might be. The
" following configuration lets you see what your other options are: 
set wildmenu

" To have the completion behave similarly to a shell, i.e. complete only up to
" the point of ambiguity (while still showing you what your options are), also
" add the following:
set wildmode=list:longest

" These two options, when set together, will make /-style searches
" case-sensitive only if there is a capital letter in the search expression.
" *-style searches continue to be consistently case-sensitive. 
set ignorecase 
set smartcase

" A running gvim will always have a window title, but when vim is run within
" an xterm, by default it inherits the terminal‚Äôs current title. 
set title

" When the cursor is moved outside the viewport of the current window, the
" buffer is scrolled by a single line. Setting the option below will start the
" scrolling three lines before the border, keeping more context around where
" you‚Äôre working. 
set scrolloff=3

" Swap files and backups are annoying but can save you a lot of trouble.
" Rather than spreading them all around your filesystem, isolate them to a
" single directory: 
set backupdir=~/.vim/tmp,~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim/tmp,~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set undodir=~/.vim/tmp/undo,~/.vim/tmp,~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backup undofile

" Be smart, Private files are private for a reason, do not spread bits of them
" everywhere
autocmd BufRead,BufNewFile ~/Private/* set backupdir=~/Private/.tmp|set directory=~/Private/.tmp|set undodir=~/Private/.tmp

" Intuitive backspacing in insert mode
set backspace=indent,eol,start
 

" Highlight search terms...
set hlsearch
set incsearch " ...dynamically as they are typed.

" Blink highlighted search results
" This rewires n and N to do the highlighing...
nnoremap <silent> n   n:call HLNext(0.1)<cr>zzzv
nnoremap <silent> N   N:call HLNext(0.1)<cr>zzzv
function! HLNext (blinktime)
  highlight WhiteOnRed ctermbg=red ctermfg=white
  let [bufnum, lnum, col, off] = getpos('.')
  let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
  let target_pat = '\c\%#'.@/
  let ring = matchadd('WhiteOnRed', target_pat, 101)
  redraw
  exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
  call matchdelete(ring)
  redraw
endfunction


" The ‚ÄúPress ENTER or type command to continue‚Äù prompt is jarring and usually
" unnecessary. You can shorten command-line text and other info tokens with,
set shortmess=atI

" I Never, ever used background=light
set background=dark

" Automatically read a file again if it has been modified outside vim
" and not in the current session
set autoread

" Formatting, TextMate-style
nnoremap Q gqip

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" php
let php_htmlInStrings = 1 " use html syntax in strings
"" shell scripting
let highlight_function_name = 1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Clickodrome binds
map  <C-s> :w!<CR>
imap <C-s> <Esc>:w!<CR>a

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Clear current search highlight
nnoremap <esc> :noh<return><esc>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Write file with sudo // Life saver !
function! Sudowq()
	exe "w !sudo tee % > /dev/null"
	exe "e!"
endfunction
nmap <F2> :call Sudowq()<CR><Enter>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" In zsh: bindkey "^F" edit-command-line, just colorize the tmp file
autocmd BufReadPost /tmp/zshecl* set filetype=zsh


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tabstop=4
set shiftwidth=4
set autoindent smartindent
set expandtab

autocmd FileType make     set noexpandtab
autocmd FileType python   set noexpandtab

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Make some plugins stfu
if !executable('git') || !executable('curl')
	let g:loaded_gist_vim = 1
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" I HATE HATE HATE Mouse emulation
set mouse-=a

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Used for C and Hint man plugin
autocmd FileType c,cpp set ch=2
if &bg == "dark"
    hi HintHL cterm=bold ctermfg=white ctermbg=black guifg=blue3 guibg=white
else
    hi HintHL cterm=bold ctermfg=black ctermbg=white guifg=white guibg=blue3
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic
let g:syntastic_enable_signs=1
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'passive_filetypes': ['c', 'cpp', 'html'] }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" A.vim
let g:alternateNoDefaultAlternate = 1 " Do not alternate if not found


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Map C-Down and C-Up to move lines up/down, M-{Up,Right,Down,Left} for blocks
nmap <C-Down> :m+<CR>==
nmap <C-Up> :m-2<CR>==
imap <C-Down> <Esc>:m+<CR>==gi
imap <C-Up> <Esc>:m-2<CR>==gi

vmap <expr> <M-Left>  DVB_Drag('left')
vmap <expr> <M-Right> DVB_Drag('right')
vmap <expr> <M-Down>  DVB_Drag('down')
vmap <expr> <M-Up>    DVB_Drag('up')
vmap <expr> D         DVB_Duplicate()

set virtualedit=block

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Source a local configuration file if available.
nmap Od <C-Left>
nmap Oc <C-Right>
nmap [D <C-Left>
nmap [C <C-Right>

imap Od <C-Left>
imap Oc <C-Right>
imap [D <C-Left>
imap [C <C-Right>

vmap Od <C-Left>
vmap Oc <C-Right>
vmap [D <C-Left>
vmap [C <C-Right>

map <C-Left> <C-T>
map <C-Right> <C-]>

" Use space to jump down a page (like browsers do)...
nnoremap <Space> <PageDown>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Reselect visual block after indent/outdent
" http://vimbits.com/bits/20
vnoremap < <gv
vnoremap > >gv

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Get rid of this stupid default pink background 
highlight Pmenu ctermbg=0 ctermfg=5 
highlight PmenuSel cterm=bold ctermbg=5 ctermfg=0 
highlight PmenuSbar ctermbg=5 ctermfg=0 

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OmniCppComplete
autocmd CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
autocmd CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview
let OmniCpp_DefaultNamespaces   = ["std", "_GLIBCXX_STD"]
let OmniCpp_GlobalScopeSearch   = 1
let OmniCpp_MayCompleteArrow    = 1 " autocomplete after ->
let OmniCpp_MayCompleteDot      = 1 " autocomplete after .
let OmniCpp_MayCompleteScope    = 1 " autocomplete after ::
let OmniCpp_NamespaceSearch     = 1
let OmniCpp_SelectFirstItem     = 2 " select first item (but don't insert)
let OmniCpp_ShowAccess          = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype (i.e. parameters) in popup window

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Alternate ( A.vim )
let g:alternateNoDefaultAlternate = 1
let g:alternateRelativeFiles = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Openssl
let g:openssl_backup = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Make tabs, trailing whitespace, and non-breaking spaces visible ]======
exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"
augroup VisibleNaughtiness
    autocmd!
    autocmd BufEnter  *       set list
    autocmd BufEnter  *.txt   set nolist
    autocmd BufEnter  *.vp*   set nolist
    autocmd BufEnter  *       if !&modifiable
    autocmd BufEnter  *           set nolist
    autocmd BufEnter  *       endif
augroup END


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status line
set laststatus=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Unite all the things
let g:unite_source_history_yank_enable = 1
call unite#filters#matcher_default#use(['matcher_fuzzy'])

map <silent> <C-x><C-x> :<C-u>Unite -start-insert file_rec/async buffer<cr>
map <silent> <C-x>x     :<C-u>Unite -start-insert file_rec/async buffer history/yank<cr>

map <silent> <C-v><C-v> :<C-u>Unite buffer<cr>
map <silent> <C-v>v     :<C-u>Unite buffer<cr>

map <silent> <C-c><C-c> :<C-u>Unite -vertical file buffer<cr>
map <silent> <C-c>c     :<C-u>Unite -vertical file buffer<cr>

map <silent> <C-w><C-w> :<C-u>Unite -start-insert tag<cr>
map <silent> <C-w>w     :<C-u>UniteWithCursorWord tag<cr>

"autocmd vimenter * if !argc() | Unite -vertical -winwidth=40 file | endif
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Custom mappings for the unite buffer
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Play nice with supertab
  let b:SuperTabDisabled=1
  " Enable navigation with control-j and control-k in insert mode
  noremap <buffer> <Esc><Esc>    <Esc>:q!<CR>
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
  map  <buffer> <C-w>   <Esc>:q!<CR>
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Nerdcommenter shortcuts
vmap // <leader>cigv
nmap // <leader>cigv
let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" neocomplcache settings
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VimTags options
let g:easytags_file = '~/.vim/tags'
set tags=./.tags;,~/.vim/tags
map <F3> :UpdateTags<CR>
map <F4> :execute 'silent !/usr/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .' <Bar> redraw! <Bar> HighlightTags<CR>
" custom tags repository
set tags+=~/.vim/tags/**


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" python-mode
let g:pymode_lint_write = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-addon-local-vimrc
let g:local_vimrc = {'names':['.vimrc.project'],'hash_fun':'LVRHashOfFile'}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Fix vim closetag
if !exists("b:unaryTagsStack") || exists("b:closetag_html_style")
    if &filetype == "html" || exists("b:closetag_html_style")
        let b:unaryTagsStacktack="area base br dd dt hr img input link meta param"
    else " for xml and xsl
        let b:unaryTagsStack=""
    endif
endif

if !exists("b:unaryTagsStack")
    let b:unaryTagsStack=""
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Source a local configuration file if available.
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
